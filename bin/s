#!/bin/bash

###
# Copyright (c) 2012, Grant Robertson
# http://github.com/grobertson/
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.
#
#

VERSION="0.9.2 [port_forwarding]"
CONFIGDIR="$HOME/.s/"
CONFIGFILE="$HOME/.sconfig"    


if [ ! -d $CONFIGDIR ]; then
    mkdir $CONFIGDIR
fi

if [ ! -f $CONFIGFILE ]; then
  #echo basic config into config file here
  echo "#s configuration" > $CONFIGFILE
  echo "#Basic ssh config" >> $CONFIGFILE
  echo "KEYPATH=$HOME/.ssh/" >> $CONFIGFILE
  echo "KEYFILE=id_rsa" >> $CONFIGFILE  
fi

if [ -f $CONFIGFILE ]; then
  source $CONFIGFILE
fi

function remove {
  if [ -f "/usr/local/bin/s" ]; then
    sudo rm -f "/usr/local/bin/s"
    echo "Removed s from /usr/local/bin/"
  fi
  if [ -f "/usr/bin/s" ]; then
    sudo rm -f "/usr/bin/s"
    echo "Removed s from /usr/bin/"
  fi
  if [ -f "/bin/s" ]; then
    sudo rm -f "/bin/s"
    echo "Removed s from /bin/"
  fi
  if [ -f $HOME/bin/s ]; then
    sudo rm -f $HOME/bin/s
    echo "Removed s from $HOME/bin/"
  fi
  exit 0  
}
 
function install {
  if [[ "$OPT_INSTALL" != "" ]]; then  
    case "$OPT_INSTALL" in
        home) 
          if [ ! -d $HOME/bin ]; then
            mkdir $HOME/bin
            chmod 700 $HOME/bin
          fi
          cp -f s $HOME/bin/s
          chmod 700 $HOME/bin/s
          echo "Installed s to ~/bin/ -- Make sure ~/bin is in your PATH"
          exit 0
          ;;
        system) 
          if [ -d "/usr/local/bin" ]; then
            sudo cp -f s "/usr/local/bin/s"
            sudo chown root "/usr/local/bin/s"
            sudo chmod 755 "/usr/local/bin/s"
            echo "Installed s to /usr/local/bin/"
            exit 0
          fi
          if [ -d "/usr/bin" ]; then
            sudo cp -f s "/usr/bin/s"
            sudo chown root "/usr/bin/s"
            sudo chmod 755 "/usr/bin/s"
            echo "Installed s to /usr/bin/ (/usr/local/bin doesn't exist!)"
            exit 0
          fi
          if [ -d "/bin" ]; then
            sudo cp -f s "/bin/s"
            sudo chown root "/bin/s"
            sudo chmod 755 "/bin/s"
            echo "Installed s to /usr/bin/ (/usr/local/bin and /usr/bin/ don't exist!)"
            exit 0
          fi
          echo "Couldn't find a suitable bin directory on this system. Maybe try 's --install home'?"
          exit 1
          ;;
        *) 
          echo "Install must be either 'home' or 'system'."
          exit 1;;
    esac
  fi
  echo "Install where?"
  echo " Install for this user only:  's --install home'"               
  echo " Install for all users (requires root):  's --install system'"
  exit 1
}

function do_connect() {
    list=(`ls -A $CONFIGDIR | sort`)
    for filename in "${list[@]}"
    do
      if [[ "$1" == $filename ]]; then
        source $CONFIGDIR$1
        # rub out keypath for the moment. fix later.
        KEYPATH=""
        for PORTFW in "${LISTEN[@]}"
          do
            L_OPTS="-L $PORTFW $L_OPTS"
          done
        for PORTFW in "${RLISTEN[@]}"
          do
            R_OPTS="-R $PORTFW $R_OPTS"
          done        
        #echo " $R_OPTS $L_OPTS -i $KEYPATH$KEYFILE $USER@$HOST "
        ssh $R_OPTS $L_OPTS -i $KEYPATH$KEYFILE $USER@$HOST
        exit 0
      fi
    done
    echo "s: No configuration named $1. Perhaps you should --save one?"
}

function show_config {
    ls -A $CONFIGDIR | grep -v template | sort
    exit
}

function show_usage {
    echo "usage: $0 [list|show|help] [configuration_name|--save configuration_name][-i identity_file] user@host.com" >&2
}

function show_help {
    echo "usage: $0 [configuration_name|--save configuration_name][-i identity_file] user@host.com" >&2
    echo "———" >&2
    echo "s Version $VERSION — An ssh supertool " >&2
    echo    
    echo "usage: s [option]" >&2
    echo " s <configuration name> — Load configuration and ssh to remote acct/system" >&2
    echo " s show — Show available configurations" >&2
    echo " s help — Display this message" >&2
    exit
}

function save_config {
  if [[ "$OPT_SAVE" == "show" ]] ; then
    echo "s: Configuration name can't be $OPT_SAVE, it's reserved. Sorry."
    exit 1
  fi
  echo "s: Configuration will be saved as $OPT_SAVE"
  echo "## Basics" > $CONFIGDIR$OPT_SAVE
  echo "HOST=$OPT_HOST" >> $CONFIGDIR$OPT_SAVE 
  echo "USER=$OPT_USER" >> $CONFIGDIR$OPT_SAVE                                     
  if [[ "$OPT_KEYFILE" != "" ]] ; then
    echo '##Keys' >> $CONFIGDIR$OPT_SAVE
    echo "KEYFILE=$OPT_KEYFILE" >> $CONFIGDIR$OPT_SAVE
    #Currently unused, use fullpath in KEYFILE for now
    #echo '#KEYPATH=".ssh/"' >> $CONFIGDIR$OPT_SAVE
  fi
  for PORTFW in "${OPT_LISTEN[@]}"
  do
    L=$(($L + 1))
    echo "LISTEN[$L]=$PORTFW"   >> $CONFIGDIR$OPT_SAVE
  done
  for PORTFW in "${OPT_RLISTEN[@]}"
  do
    R=$(($R + 1))
    echo "RLISTEN[$R]=$PORTFW"   >> $CONFIGDIR$OPT_SAVE
  done
}

function make_key {
  # Could use more options, but works for making a simple 2048 bit key with or without passphrase
  TEMPKEYNAME=_s_temp_key
  TEMPKEYPATH=$KEYPATH
  ssh-keygen -b 2048 -f $TEMPKEYPATH$TEMPKEYNAME
  NEWKEYNAME=`shasum $TEMPKEYPATH$TEMPKEYNAME  | awk '{ print $1 }'`
  mv $TEMPKEYPATH$TEMPKEYNAME $KEYPATH$NEWKEYNAME
  mv $TEMPKEYPATH$TEMPKEYNAME.pub $KEYPATH$NEWKEYNAME.pub
  rm -f $TEMPKEYPATH$TEMPKEYNAME
  rm -f $TEMPKEYPATH$TEMPKEYNAME.pub
  chmod 600 $KEYPATH$NEWKEYNAME
  chmod 600 $KEYPATH$NEWKEYNAME.pub
  echo "Your new ssh key is $KEYPATH$NEWKEYNAME"

}

function install_key {
  PUBKEYSTRING=`cat $KEYPATH$NEWKEYNAME.pub`
  echo $PUBKEYSTRING
  #If an existing key was supplied, try it. If not ssh should ask for password
  if [[ $OPT_KEYFILE != "" ]]; then
    IOPT=" -i $OPT_KEYFILE "
  fi
  ssh $IOPT $OPT_USER@$OPT_HOST "echo '$PUBKEYSTRING' >> .ssh/authorized_keys"
  OPT_KEYFILE=$KEYPATH$NEWKEYNAME
}

#Check to see if at least one argument was specified
if [ $# -lt 1 ] ; then
   echo "s: You must specify at least 1 argument."
   show_usage
   exit 1
fi
 
#Process arguments
while getopts h-:i:n:L:R: opt
do
   case "$opt" in
      h) show_help;;
      i) OPT_KEYFILE=$OPTARG;;
      L) 
      OPT_LISTEN[$((${#OPT_LISTEN[@]} + 1))]=$OPTARG
      ;;
      R) 
      OPT_RLISTEN[$((${#OPT_RLISTEN[@]} + 1))]=$OPTARG
      ;;  
      \?) show_help;;
      -)
        case "${OPTARG}" in
            save)
                OPT_SAVE="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                ;;
            save=*)
                OPT_SAVE=${OPTARG#*=}
                opt=${OPTARG%=$val}
                ;;
            remove)
                OPT_INSTALL="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                if [[ $OPT_INSTALL == "force" ]]; then
                  remove
                  exit 0
                fi
                echo "Do you really want to remove s from all likely places? 's --remove force'"
                exit 1
                ;;
            help) 
                show_help
                ;;
            addkey)
                DO_ADDKEY="yes"
                ;;
            install)
                OPT_INSTALL="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                install
                exit 0
                ;;
            install=*)
                OPT_INSTALL=${OPTARG#*=}
                install
                exit 0
                ;;
            *)
                if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                    echo "s: Unknown option --${OPTARG}" >&2
                    exit 1
                fi
                ;;
        esac;;
   esac
done

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# We want at least one non-option argument. 
if [ $# -eq 0 ]; then
    echo $USAGE >&2
    echo
    show_usage
    exit 1
fi

#The original dash-less command args. Don't add to these anymore.
case "$1" in
   help) show_help;;
   show) show_config;;
   list) show_config;;
esac 

#now that all that's out of the way...


# Is this arg a user/host combo? 
if [[ "$1" == *@* ]]; then
    OIFS=$IFS
    IFS='@'
    arr=($1)
    OPT_USER=${arr[0]}
    OPT_HOST=${arr[1]}
    IFS=$OIFS
    if [[ "$2" != "" ]]; then
      OPT_SAVE=$2
      if [[ $DO_ADDKEY == "yes" ]]; then
        echo "Do addkey" 
        make_key
        install_key
      fi
    fi
    # just do a connection here? remind user to save? 
    # what should this behavior be? "save(y/n), name:?"
    # right now, warn and die, assuming user will want to up arrow and add a name to the last command line
    if [[ "$OPT_SAVE" != "" ]]; then
      save_config
      exit 0
    fi
    echo "s: No configuration name given as argument to --save or as last comand line parameter."
    exit 1
fi

# do_connect is safe to call, will error and die pretty if the congiguration doesn't exist.
do_connect $1